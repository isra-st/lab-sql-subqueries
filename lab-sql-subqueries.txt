Lab | SQL Subqueries
In this lab, you will be using the Sakila database of movie rentals. Create appropriate joins wherever necessary.

Instructions
1. How many copies of the film Hunchback Impossible exist in the inventory system?
2. List all films whose length is longer than the average of all the films.
3. Use subqueries to display all actors who appear in the film Alone Trip.
4. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as family films.
5. Get name and email from customers from Canada using subqueries. Do the same with joins. Note that to create a join, you will have to identify the correct tables with their primary keys and foreign keys, that will help you get the relevant information.
6. Which are films starred by the most prolific actor? Most prolific actor is defined as the actor that has acted in the most number of films. First you will have to find the most prolific actor and then use that actor_id to find the different films that he/she starred.
7. Films rented by most profitable customer. You can use the customer table and payment table to find the most profitable customer ie the customer that has made the largest sum of payments
8. Get the client_id and the total_amount_spent of those clients who spent more than the average of the total_amount spent by each client.

USE sakila;

-- Lab | SQL Subqueries

SELECT 
    COUNT(*)
FROM
    inventory
        JOIN
    film USING (film_id)
WHERE
    title = 'Hunchback Impossible';

-- 2. List all films whose length is longer than the average of all the films.
SELECT 
    title, length
FROM
    film
WHERE
    length > (SELECT 
            AVG(length)
        FROM
            film)
ORDER BY length;

-- 3. Use subqueries to display all actors who appear in the film Alone Trip.
SELECT 
    actor_id
FROM
    film_actor
WHERE
    film_id = (SELECT 
            film_id AS at
        FROM
            film
        WHERE
            title = 'Alone Trip');

-- 4. Sales have been lagging among young families, and you wish to target all family movies for a promotion.
-- Identify all movies categorized as family films.
SELECT 
    title
FROM
    film
WHERE
    film_id IN (SELECT 
            film_id
        FROM
            film_category
                JOIN
            category USING (category_id)
        WHERE
            name = 'Family');

-- 5. Get name and email from customers from Canada using subqueries.
SELECT 
    first_name, last_name, email
FROM
    customer
WHERE
    address_id IN (SELECT 
            address_id
        FROM
            address
        WHERE
            city_id IN (SELECT 
                    city_id
                FROM
                    city
                WHERE
                    country_id = (SELECT 
                            country_id
                        FROM
                            country
                        WHERE
                            country = 'Canada')));

-- Do the same with joins.
-- Note that to create a join, you will have to identify the correct tables with their primary keys and foreign keys, that will help you get the relevant information.
SELECT 
    first_name, last_name, email
FROM
    customer
        JOIN
    address USING (address_id)
        JOIN
    city USING (city_id)
        JOIN
    country USING (country_id)
WHERE
    country = 'Canada';

-- 6. Which are films starred by the most prolific actor? Most prolific actor is defined as the actor that has acted in the most number of films.
-- First you will have to find the most prolific actor and then use that actor_id to find the different films that he/she starred.
SELECT 
    title
FROM
    film
WHERE
    film_id IN (SELECT 
            film_id
        FROM
            film_actor
        WHERE
            actor_id = (SELECT 
                    actor_id
                FROM
                    film_actor
                GROUP BY actor_id
                ORDER BY COUNT(*) DESC
                LIMIT 1));

-- 7. Films rented by most profitable customer.
-- You can use the customer table and payment table to find the most profitable customer ie the customer that has made the largest sum of payments
SELECT 
    customer_id, SUM(amount) AS sum
FROM
    customer
        JOIN
    payment USING (customer_id)
GROUP BY customer_id
ORDER BY sum DESC
LIMIT 1;

-- 8. Get the client_id and the total_amount_spent of those clients who spent more than the average of the total_amount spent by each client.
SELECT 
    customer_id, SUM(amount) sum
FROM
    payment
GROUP BY customer_id
HAVING sum > (SELECT 
        SUM(amount) / COUNT(DISTINCT customer_id)
    FROM
        payment)
ORDER BY sum DESC;